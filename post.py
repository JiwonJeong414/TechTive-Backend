from marshmallow import validate
from extensions import db, ma
from formatting import FormattingSchema

class Note(db.Model):
    """
    Note Model with Sentiment Values associated 
    """
    __tablename__ = "notes"
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    user_id = db.Column(db.Integer, db.ForeignKey("users.id"), nullable=False) # one-to-many each user can have many notes
    content = db.Column(db.Text, nullable=False) # db.Text is more large string values
    anger_value = db.Column(db.Float, nullable=False, default=0.0) # set the ones not put into hugging false default to 0
    disgust_value = db.Column(db.Float, nullable=False, default=0.0)
    fear_value = db.Column(db.Float, nullable=False, default=0.0)
    joy_value = db.Column(db.Float, nullable=False, default=0.0)
    neutral_value = db.Column(db.Float, nullable=False, default=0.0)
    sadness_value = db.Column(db.Float, nullable=False, default=0.0)
    surprise_value = db.Column(db.Float, nullable=False, default=0.0)
    created_at = db.Column(db.DateTime(timezone=True), default=db.func.now())

    # Relationship with Formatting
    formattings = db.relationship("Formatting", backref="note", lazy=True, cascade="all, delete-orphan")

    def __repr__(self):
        return f"<Post {self.id} by User {self.user_id} created at {self.created_at}"

class NoteSchema(ma.SQLAlchemySchema):
    class Meta:
        model = Note
        load_instance = True # schema will create actual model instances when deserializing data
        include_relationships = True

    id = ma.auto_field(dump_only=True) # dump_only means these fields can only be serialized (output) but not deserialized (input)
    user_id = ma.auto_field(dump_only=True) # dump_only good for fields like id or whatever that is generated by the system
    content = ma.auto_field(required=True, validate=validate.Length(min=1)) # required = True ensures the content field is not empty 
    anger_value = ma.auto_field(dump_only=True)
    disgust_value = ma.auto_field(dump_only=True)
    fear_value = ma.auto_field(dump_only=True)
    joy_value = ma.auto_field(dump_only=True)
    neutral_value = ma.auto_field(dump_only=True)
    sadness_value = ma.auto_field(dump_only=True)
    surprise_value = ma.auto_field(dump_only=True)
    created_at = ma.auto_field(dump_only=True)
    formattings = ma.Nested(FormattingSchema, many=True, exclude=("note_id",)) # enable relationship and exclude note_id to prevent circular ref.
